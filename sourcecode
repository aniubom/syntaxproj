#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int bool;


#define true 1
#define false 0
//setting boolean as int
int isvalid;
int top = -1;
char stack[100];


// function prototypes
void push(char);
void pop();
bool find_top();

#include <stdio.h>
#include <ctype.h>
/* Global Variable declarations */
int charClass;
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>

char lexeme [100];
char nextChar;
int lexLen;
int token;
int nextToken;
FILE *in_fp,*in_fp2, *fopen();
void addChar();
void getChar();
void getNonBlank();
int lex();

/* Character classes */
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99

/* Token codes */
#define INT_LIT 10
#define IDENT 11
#define ASSIGN_OP 20
#define ADD_OP 21
#define SUB_OP 22
#define MULT_OP 23
#define DIV_OP 24
#define LEFT_PAREN 25
#define RIGHT_PAREN 26
/******************************************************/
/* main prog */
main() {
	 
/* Open the input data file and process its contents */
 if ((in_fp = fopen("front.txt", "r")) == NULL)                    //if the file is not found print error
 printf("ERROR - cannot open front.in \n"); 
 else {                                                           //if file found, read file
 	in_fp2 = fopen("front.txt", "r");
 	 char line2 [128][324];
 	 int i=0;
 	 int count=0;
 	 char line[128];
 	  while ( fgets ( line, sizeof line, in_fp2 ))
 	  {
 	  	count+=1;
 	  	strcpy(line2[i],line);
 	  	i+=1;
	   }
	   	in_fp2 = fopen("front.txt", "r");
	 int u=0; 
	 

 line [ 128 ]; /* or other suitable maximum line size */
 
 int k=0;
     		 while ( k<count  ) /* read a line */
      		{
      			
       //  fputs ( line2[k], stdout ); /* write the line */
         //isvalid=isValid(line);
            
          	isvalid=isValid(line2[k]);      //checks if the expression is correct
          	
          //	printf("%d",(int) isvalid);
      
      if(isvalid==0)//Means expression is not valid
      {
      	
        fputs("Expression",stdout);
		fputs ( line2[k], stdout );
		  fputs(":Invalid .Skipping the line\n",stdout);
      
      	
	  }
	  
	  else
	  {
	  	fputs("Expression",stdout);
		fputs ( line2[k], stdout );
		printf("\n");
	  
	  		getChar();  //gets the next character of input and determines its character class
	 do {
	 	
 	lex();
 		} //dowhile
	 while (nextToken != 26 );   //while the next line is not reached...
	  }
      k+=1;
    }//bigger while
 
	}//else
}
/*****************************************************/
/* lookup - a function to lookup operators and parentheses
 and return the token */
int lookup(char ch) {
 switch (ch) {
 case '(':
 addChar();
 nextToken = LEFT_PAREN;
 break;
 case ')':
 addChar();
 nextToken = RIGHT_PAREN;
 break;
 case '+':
 addChar();
 nextToken = ADD_OP;
 break;
 case '-':
 addChar();
 nextToken = SUB_OP;
 break;
 case '*':
 addChar();
 nextToken = MULT_OP;
 break;
 case '/':
 addChar();
 nextToken = DIV_OP;
 break;
 default:
 addChar();
 nextToken = EOF;
 break;
 }
 return nextToken;
}
/*****************************************************/
/* addChar - a function to add nextChar to lexeme */
void addChar() {
 if (lexLen <= 98) {
 lexeme[lexLen++] = nextChar;
 lexeme[lexLen] = 0;
 }
 else
 printf("Error - lexeme is too long \n");
}
/*****************************************************/
/* getChar - a function to get the next character of
 input and determine its character class */
void getChar() {
 if ((nextChar = getc(in_fp)) != EOF) {
 if (isalpha(nextChar))
 charClass = LETTER;
 else if (isdigit(nextChar))
 charClass = DIGIT;
 else charClass = UNKNOWN;
 }
 else
 charClass = EOF;
}
/*****************************************************/
/* getNonBlank - a function to call getChar until it
 returns a non-whitespace character */
void getNonBlank() {
 while (isspace(nextChar))
 getChar();
}

